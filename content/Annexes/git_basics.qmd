---
title: "Git Basics"
weight: 10
tags:
  - Basics
  - Annexes
  - Utils
  - Git
categories:
  - Annexes
  - Git
type: book
description: Git c'est imposé comme un incontournable pour le développement, et ne concerne désormais plus que les developeurs mais également l'ensemble des datascientist. En maitriser les bases est ainsi presque indispensable, même si les premières utilisations ne sont rarement de bon souvenirs.
image: .img/history.png
---

### Document de Cours : Guide Détaillé sur Git pour les Débutants

#### Introduction à Git

Git est un système de contrôle de version distribué très populaire dans le monde du développement logiciel. Il permet aux développeurs de suivre et de gérer les modifications apportées aux codes sources au fil du temps. Ce guide vise à fournir une compréhension détaillée de Git pour les débutants.

#### 1. Principes de Base de Git

- **Répertoires de travail et dépôts** :
  - Un **répertoire de travail** est un dossier sur votre ordinateur où vous travaillez sur votre projet.
  - Un **dépôt (repository) Git** est une structure de données qui stocke les informations sur les modifications et l'historique de votre projet.

- **Commit** :
  - Un **commit** est une capture instantanée de l'état de votre projet à un moment donné. Chaque commit a un identifiant unique appelé un hash SHA-1.

- **Branches** :
  - Les **branches** permettent de développer des fonctionnalités, de corriger des bugs, ou d'expérimenter dans des contextes isolés. La branche principale par défaut est généralement appelée `master` ou `main`.

#### 2. Installation et Configuration de Git

- **Installation** :
  - Git peut être installé à partir de https://git-scm.com/. Suivez les instructions pour votre système d'exploitation.

- **Configuration Initiale** :
  - Configurez votre nom et votre adresse email, qui seront utilisés dans vos commits :
    ```
    git config --global user.name "Votre Nom"
    git config --global user.email "votre.email@example.com"
    ```

#### 3. Création et Clonage d'un Dépôt Git

- **Initialisation d'un Nouveau Dépôt** :
  - Pour initialiser un nouveau dépôt dans un répertoire existant :
    ```
    cd /chemin/vers/votre/projet
    git init
    ```

- **Clonage d'un Dépôt Existant** :
  - Pour cloner (copier) un dépôt existant :
    ```
    git clone https://adresse/du/depot.git
    ```

#### 4. Travail avec Git : Add, Commit, Push

- **Add** :
  - Ajoute les modifications de fichiers dans l'index (zone de staging) :
    ```
    git add <fichier>
    git add .  # Ajoute tous les fichiers modifiés
    ```

- **Commit** :
  - Enregistre les modifications dans l'historique du dépôt :
    ```
    git commit -m "Message décrivant le commit"
    ```

- **Push** :
  - Envoie les commits locaux vers un dépôt distant :
    ```
    git push origin <nom_de_la_branche>
    ```

#### 5. Branches et Fusion (Merge)

- **Création de Branches** :
  - Pour créer une nouvelle branche :
    ```
    git branch <nom_de_la_branche>
    ```

- **Changement de Branches** :
  - Pour changer de branche :
    ```
    git checkout <nom_de_la_branche>
    ```

- **Fusion** :
  - Fusionne les changements d'une branche dans une autre :
    ```
    git merge <nom_de_la_branche>
    ```

#### 6. Gestion des Conflits

- Les conflits surviennent lorsque des modifications concurrentes sont apportées à la même partie d'un fichier. Git marque ces conflits dans les fichiers concernés, et il vous appartient de les résoudre manuellement.

#### 7. Autres Commandes Utiles

- **Status** :
  - Affiche l'état des fichiers (modifiés, indexés, non suivis) :
    ```
    git status
    ```

- **Log** :
  - Affiche l'historique des commits :
    ```
    git log
    ```

- **Fetch et Pull** :
  - `git fetch` télécharge les changements depuis le dépôt distant sans les fusionner.
  - `git pull` télécharge et fusionne automatiquement les changements.

#### Conclusion

Git est un outil puissant pour la gestion des versions. La maîtrise des commandes de base et des concepts de Git est cruciale pour tout développeur. Commencez par expérimenter avec des projets simples, et au fur et à mesure, vous vous familiariserez avec des fonctionnalités plus avancées de Git.

---

Ce guide vous a introduit aux fondamentaux de Git. Pour devenir compétent, la pratique régulière et l'exploration des fonctionnalités avancées sont essentielles. N'hésitez pas à consulter la documentation officielle de Git pour approfondir vos connaissances.