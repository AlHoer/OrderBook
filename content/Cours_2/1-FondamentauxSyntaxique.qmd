---
title: "Syntaxe et objets de Base Python"
weight: 10
tags:
  - Syntaxe
  - Bases
  - opérateurs
  - variables
categories:
  - Cours
  - Fondamentaux
type: book
description: "Ce chapitre offre une plongée approfondie dans la syntaxe et les objets de base de Python. Il vise à fournir une compréhension solide des fondements du langage, couvrant tout, des variables et opérateurs aux structures de données essentielles comme les listes, les dictionnaires, et les tuples. Chaque section est enrichie d'exemples concrets et d'explications détaillées pour faciliter la compréhension et l'application pratique des concepts."
image: .img/basesyntax.png
code-links: binder
---

# Syntaxe de Base et Concepts Fondamentaux en Python

---

## Section 1.1 : Les Bases de la Syntaxe Python

La syntaxe de Python est conçue pour être lisible et concise. Comprendre ses particularités peut vous aider à écrire du code plus efficace et expressif.


### Expressions et Indentations

- **Expressions** : 
  En Python, chaque ligne de code est généralement une expression, par exemple `a = 5` ou `print(a)`.

- **Indentations** : 
  Python utilise l'indentation pour définir des blocs de code. Contrairement à d'autres langages qui utilisent des accolades, l'indentation en Python n'est pas seulement pour la lisibilité mais est syntaxiquement significative.


```{python}
a=10
if a > 5:
    print("a est supérieur à 5")
``` 

### Commentaires

- En Python, les commentaires commencent par `#`. Tout ce qui suit `#` sur la ligne est ignoré par l'interpréteur.

```{python}
# Ceci est un commentaire
print("Hello, World!")  # Ceci est un commentaire en fin de ligne
```

  - *NB: L'utilisation du # est utilisé dans de nombreux langages de programmation, comme le C, le C++, le Java, le PHP, le Perl, le Ruby, le Python, etc. pour définir les commentaires*

### Types de Données Primitifs

- **Nombres** : Python supporte `int`, `float`, et plus rarement utilisés, `complex`.
- **Chaînes de Caractères** : Déclarées avec des guillemets simples `'texte'` ou doubles `"texte"`. Le `+` peut concaténer des chaînes.
- **Booléens** : `True` et `False`. Intéressant, en Python, `0`, `None`, un string vide `''`, et les collections vides comme `[]`, `{}` sont considérés comme équivalents à `False`.

---

## Section 1.2 : Variables et Opérateurs

Les variables en Python sont des identificateurs liés à des valeurs. Elles ne nécessitent pas de déclaration explicite de type.


### Déclaration de Variables et Conventions de Nommage

- Les noms de variables doivent commencer par une lettre ou un underscore `_`, suivis de lettres, chiffres, ou underscores.
- Les conventions de nommage courantes incluent `snake_case` pour les variables et fonctions, `CamelCase` pour les classes.

  ```{python}
  ma_variable = 10
  uneAutreVariable = "Bonjour"
  ```

### Opérateurs Arithmétiques et de Comparaison

- Python offre une gamme complète d'opérateurs arithmétiques (`+`, `-`, `*`, `/`, `//` pour la division entière, `%` pour le modulo, `**` pour la puissance) et de comparaison (`==`, `!=`, `>`, `<`, `>=`, `<=`).

### Opérateurs Logiques

- Les opérateurs logiques incluent `and`, `or`, et `not`.

### Opérateurs Spéciaux

- **Opérateurs Bitwise** : Opèrent sur des bits et incluent `&` (ET), `|` (OU), `^` (XOR), `~` (NON), `<<` (décalage à gauche), `>>` (décalage à droite).
- **Opérateur d'Identité** : `is` et `is not` vérifient si deux variables pointent vers le même objet.
- **Opérateur d'Appartenance** : `in` et `not in` vérifient si une valeur est présente dans une séquence.

---

## Section 1.3 : Structures de Contrôle

Les structures de contrôle en Python permettent d'exécuter conditionnellement des blocs de code ou de répéter des opérations.

### Instructions Conditionnelles

- `if`, `else`, `elif` permettent d'exécuter des blocs de code basés sur des conditions.

  ```python
  if condition:
      # code si condition est vraie
  elif autre_condition:
      # code si autre_condition est vraie
  else:
      # code si aucune des conditions précédentes n'est vraie
  ```

### Boucles

- **Boucle For** : Itère sur une séquence (comme une liste, un tuple, un dictionnaire, un ensemble, ou une chaîne de caractères).

  ```python
  for element in sequence:
      # code exécuté pour chaque élément
  ```

- **Boucle While** : Continue à exécuter un bloc de code tant qu'une condition est vraie.

  ```python
  while condition:
      # code exécuté tant que la condition est vraie
  ```

**Compréhensions de Liste**

- Une façon concise de créer des listes. Par exemple, `[x for x in range(10)]` crée une liste des nombres de 0 à 9.


---

## Section 1.4 : Gestion des Erreurs et Exceptions

La gestion des erreurs est cruciale pour écrire des applications robustes. Python fournit un mécanisme de gestion des exceptions pour gérer les erreurs de manière contrôlée.


### Try-Except Blocks

- Un bloc `try` permet de tester un bloc de code pour les erreurs, et le bloc `except` permet de gérer l'erreur.

  ```{python}
  try:
      # Code à essayer d'exécuter
      resultat = 10 / 0
  except ZeroDivisionError:
      # Code exécuté en cas de ZeroDivisionError
      print("Division par zéro!")
  ```

### Gestion de Plusieurs Exceptions :
  Vous pouvez spécifier plusieurs blocs `except` pour gérer différentes exceptions.

  ```python
  try:
      # Tentative d'exécution de code
  except TypeError:
      # Gestion d'une TypeError
  except ValueError:
      # Gestion d'une ValueError
  ```

### Bloc Finally :
  Le bloc `finally` est facultatif et exécuté quel que soit le résultat des blocs `try` et `except`.

  ```python
  try:
      # Code à essayer
  except:
      # Gestion d'une exception
  finally:
      # Code exécuté après les blocs try et except
  ```

## Section 1.5 : Exemple Concret Mélangeant les Concepts

Voyons comment on peut combiner les concepts abordés précédemment dans un exemple pratique. Cet exemple utilise une boucle `while`, une instruction conditionnelle `if`, et gère une éventuelle exception.

### Exemple Pratique : Boucle et Conditions

Imaginons un scénario où nous avons deux variables `x` et `y`. Nous voulons exécuter une boucle qui continue tant que la somme de `x` et `y` est supérieure à 8. Dans la boucle, nous effectuons une opération qui peut potentiellement lever une exception.

  ```python
  x = 10
  y = 1

  while x + y > 8:
      try:
          # Si x est impair, essayez de diviser par zéro (pour générer une exception)
          if x % 2 != 0:
              resultat = x / 0
          # Autrement, décrémentez x
          else:
              x -= 1
      except ZeroDivisionError:
          print("Tentative de division par zéro. 'x' était impair.")
          break
      finally:
          # Décrémentez y à chaque itération
          y -= 1

  print(f"Fin de la boucle avec x = {x} et y = {y}")
  ```

Dans cet exemple, la boucle `while` continue de s'exécuter tant que la condition `x + y > 8` est vraie. Si `x` est impair, le code essaie de diviser par zéro, ce qui lève une `ZeroDivisionError`. Dans ce cas, le message d'erreur est imprimé, et le mot-clé `break` interrompt la boucle. Le bloc `finally` est exécuté après chaque itération, peu importe les erreurs.


## Section 1.6 : Structures de Données de Base - Listes et Tuples

Python offre plusieurs structures de données intégrées, comme les listes et les tuples, qui sont essentielles pour le stockage et la manipulation de données.


### Listes

- Les listes en Python sont des collections ordonnées et modifiables. Elles peuvent contenir des éléments de différents types.

  ```{python}
  ma_liste = [1, 2, 3, "Python", True]
  ```

- **Opérations de Base sur les Listes** :
  - Ajout d'éléments (`append`, `extend`).
  - Suppression d'éléments (`remove`, `pop`).
  - Accès et slicing (`ma_liste[0]`, `ma_liste[1:3]`).

### Tuples

- Les tuples sont similaires aux listes, mais ils sont immuables (leurs valeurs ne peuvent pas être modifiées après leur création).

  ```{python}
  mon_tuple = (1, 2, 3, "Python")
  ```

- Utilisés pour des données qui ne doivent pas être modifiées, comme les clés dans les dictionnaires.


## Section 1.7 : Structures de Données de Base - Dictionnaires et Ensembles

Les dictionnaires et les ensembles sont des structures de données puissantes pour stocker et gérer des ensembles de données.


### Dictionnaires

- Les dictionnaires stockent des paires clé-valeur. Ils sont mutables et non ordonnés.

  ```{python}
  mon_dictionnaire = {"nom": "Alice", "age": 30, "langage": "Python"}
  ```

- **Manipulation de Dictionnaires** :
  - Ajout et modification d'éléments (`mon_dictionnaire["nom"] = "Bob"`).
  - Suppression d'éléments (`del mon_dictionnaire["age"]`, `mon_dictionnaire.pop("langage")`).
  - Accès sécurisé (`get`).

### Ensembles

- Les ensembles sont des collections non ordonnées de valeurs uniques. Utiles pour les opérations mathématiques comme les unions, intersections, et différences.

  ```{python}
  mon_ensemble = {1, 2, 3, 4, 5}
  ```

- **Opérations sur les Ensembles** :
  - Ajout (`add`) et suppression (`remove`) d'éléments.
  - Opérations comme `union`, `intersection`, et `difference`.


## Section 1.8 : Exemple Pratique Mélangeant les Structures de Données

Voyons comment combiner listes, tuples, dictionnaires et ensembles dans un exemple pratique.


### Exemple de Manipulation de Structures de Données

Supposons que nous avons une liste de tuples, chaque tuple contenant le nom d'un étudiant et son score. Nous voulons créer un dictionnaire où chaque clé est un score unique, et la valeur est la liste des noms d'étudiants ayant ce score.

  ```{python}
  etudiants = [("Alice", 85), ("Bob", 90), ("Eve", 85), ("Dave", 90), ("Carol", 75)]
  scores = {}

  for nom, score in etudiants:
      if score not in scores:
          scores[score] = [nom]
      else:
          scores[score].append(nom)

  print(scores)  # {85: ['Alice', 'Eve'], 90: ['Bob', 'Dave'], 75: ['Carol']}
  ```

Dans cet exemple, nous parcourons la liste `etudiants`. Pour chaque tuple, nous vérifions si le score est déjà une clé dans le dictionnaire `scores`. Si ce n'est pas le cas, nous ajoutons une nouvelle clé avec le score et initialisons sa valeur avec une liste contenant le nom de l'étudiant. Si le score existe déjà, nous ajoutons simplement le nom de l'étudiant à la liste correspondante.

---

## Section 1.9 : Compréhensions de Liste, de Dictionnaire et d'Ensemble

Les compréhensions en Python sont un moyen concis et puissant de créer de nouvelles listes, dictionnaires ou ensembles à partir de séquences ou d'autres structures itérables.


### Compréhensions de Liste

- Les compréhensions de liste fournissent une façon concise de créer des listes. Elles consistent en une expression suivie par une clause `for`, puis zéro ou plusieurs clauses `for` ou `if`.

  ```{python}
  # Création d'une liste des carrés des nombres de 0 à 9
  carres = [x**2 for x in range(10)]
  ```

### Compréhensions de Dictionnaire

- Semblables aux compréhensions de liste, mais créent des dictionnaires. Elles sont entourées de `{}` avec une paire clé-valeur suivie d'une clause `for`.

  ```{python}
  # Création d'un dictionnaire avec des nombres et leurs carrés
  carres_dict = {x: x**2 for x in range(5)}
  ```

### Compréhensions d'Ensemble

- Utilisées pour créer des ensembles de manière similaire aux compréhensions de liste, mais avec des éléments uniques.

  ```{python}
  # Création d'un ensemble de carrés des nombres impairs
  carres_impairs = {x**2 for x in range(10) if x % 2 != 0}
  ```

## Section 1.10 : Exemple Concret Utilisant les Compréhensions

Les compréhensions peuvent être particulièrement utiles pour transformer et filtrer des données. Voici un exemple qui utilise des compréhensions de liste et de dictionnaire pour traiter des données.


### Exemple Pratique : Transformation de Données

Imaginons que nous avons une liste de mots et que nous voulons créer un dictionnaire qui associe chaque mot à sa longueur, mais seulement pour les mots de plus de trois lettres.

  ```{python}
  mots = ["python", "est", "un", "langage", "puissant"]
  longueur_mots = {mot: len(mot) for mot in mots if len(mot) > 3}

  print(longueur_mots)  # {'python': 6, 'langage': 7, 'puissant': 8}
  ```

Dans cet exemple, la compréhension de dictionnaire parcourt la liste `mots`, incluant uniquement les mots dont la longueur dépasse trois lettres. Pour chaque mot éligible, le dictionnaire `longueur_mots` est construit avec le mot comme clé et sa longueur comme valeur.


## Section 1.11 : Opérateurs Ternaires et Expressions Lambda

Les opérateurs ternaires et les expressions lambda en Python offrent des moyens concis d'effectuer des opérations conditionnelles et de créer de petites fonctions anonymes.


### Opérateurs Ternaires

- Les opérateurs ternaires permettent d'écrire des instructions conditionnelles en une seule ligne. La syntaxe est : `[valeur_si_vrai] if [condition] else [valeur_si_faux]`.

  ```{python}
  # Exemple d'opérateur ternaire
  age = 20
  statut = "majeur" if age >= 18 else "mineur"
  ```

### Expressions Lambda
- Les expressions lambda permettent de créer de petites fonctions anonymes. Elles sont utiles pour des opérations simples nécessitant une fonction.

  ```{python}
  # Exemple d'expression lambda
  additionner = lambda x, y: x + y
  print(additionner(5, 3))  # Affiche 8
  ```

## Section 1.12 : Techniques Avancées de Manipulation de Séquences

Python fournit des outils puissants pour manipuler des listes, des tuples et d'autres séquences de manière expressive.


### Slicing Avancé

- Le slicing permet de sélectionner des sous-parties d'une séquence. En plus des bases, Python permet des slicings plus complexes.

  ```{python}
  ma_liste = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
  sous_liste = ma_liste[::2]  # Sélectionne chaque élément pair
  ```

### Listes et Dictionnaires Imbriqués

- Les listes et dictionnaires peuvent être imbriqués pour créer des structures de données complexes.

  ```{python}
  # Exemple de dictionnaire contenant des listes
  informations = {
      "nom": "Alice",
      "hobbies": ["programmation", "jeux vidéo", "lecture"]
  }
  ```

## Section 1.13 : Exemple Pratique Combinant Plusieurs Concepts

Pour conclure ce chapitre, combinons plusieurs des concepts abordés dans un exemple illustrant leur utilité pratique.


### Exemple : Filtrage et Transformation de Données

Supposons que nous avons une liste de dictionnaires représentant des livres, et nous voulons extraire les titres des livres publiés après 2000.

  ```{python}
  livres = [
      {"titre": "Python 101", "année": 1999},
      {"titre": "Le Guide du Voyageur Galactique", "année": 1979},
      {"titre": "Apprendre la Programmation", "année": 2015}
  ]

  titres_recent = [livre["titre"] for livre in livres if livre["année"] > 2000]
  print(titres_recent)  # Affiche ['Apprendre la Programmation']
  ```

Dans cet exemple, une compréhension de liste est utilisée pour parcourir `livres`, en extrayant le `titre` de chaque livre dont l'`année` est supérieure à 2000. Cela démontre comment les compréhensions de liste peuvent être utilisées pour filtrer et transformer des données de manière concise et lisible.
```

Pour vous entrainez à pratiquer ces notions:

{{< downloadthis 1.1-Exercices.py dname=1.1-Exercices label="Telecharger le premier jeu d'exercice" icon=file-earmark-python type=success >}}

{{< downloadthis 1.2-Exercices.py dname=1.2-Exercices label="Telecharger le premier second d'exercice" icon=file-earmark-python type=success >}}