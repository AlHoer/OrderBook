---
title: "Histoire du Langage"
weight: 10
tags:
  - Basics
  - Compilation
  - Histoire
  - Introduction
categories:
  - Cours
  - Introduction
type: book
description: |
  `Python` est un langage de programmation qui a su gagner sa crédibilité grâce à sa simplicité et sa flexibilité. Bien qu'il ne soit pas l'un des plus anciens langages encore utilisés, il est largement adopté dans de nombreux domaines. Comprendre l'histoire de Python permet de comprendre ses choix de conception, son fonctionnement et sa direction future. Dans ce chapitre, nous allons explorer l'histoire de Python, sa popularité et ses critiques, et son évolution de Python 2 à Python 3 et au-delà. 
image: .img/history.png
---


### a - Origines 
Python, un langage de programmation haut niveau, a été créé par Guido van Rossum et sa première version a été publiée en 1991. L'objectif principal de Python était de combiner une syntaxe claire avec une puissance remarquable. Il est nommé d'après la série télévisée britannique "Monty Python's Flying Circus", reflétant l'approche amusée de Van Rossum envers la programmation.

Python a évolué au fil des années, en gardant son principe directeur : une syntaxe qui favorise la lisibilité et la simplicité. Cette approche a conduit à un langage qui est à la fois facile à apprendre pour les débutants et puissant pour les développeurs expérimentés. Python est interprété, ce qui signifie que les scripts sont exécutés ligne par ligne, permettant une débogage et une interaction faciles.

La philosophie de Python est encapsulée dans le **"Zen de Python" (PEP 20)**, un ensemble de 19 aphorismes pour écrire de bons programmes en Python. Parmi les plus célèbres, on trouve "Beautiful is better than ugly", "Explicit is better than implicit" et "Simple is better than complex".
Cette philosophie a été un facteur clé dans le succès de Python, en particulier pour les débutants qui peuvent facilement apprendre le langage et écrire des programmes simples et lisibles et est à garder en tête lors de l'écriture de code Python. 

Pour autant, bien que simple à prendre en main, Python est un langage puissant qui pour être réellement maîtrisé et compris dans sa globalité nécessite de la pratique et de l'expérience. De par son fonctionnement interne, le language permet ainsi à des développeurs expérimentés de trouver des solutions élégantes et efficaces à des problèmes complexes, qui serviront ensuite de base à des bibliothèques et frameworks utilisés par des développeurs bien moins expérimentés qui ne se douteront pas une seconde de ce qui se cache en dessous.

En résumé, le succès de Python repose sur plusieurs facteurs : sa simplicité, sa polyvalence (il est utilisé dans le développement web, l'analyse de données, l'intelligence artificielle, la science des données, et bien d'autres domaines), et une communauté active qui contribue à un écosystème riche en bibliothèques et frameworks.

### b - et évolution

Mais le language existe depuis 1991, et a donc évolué au fil des années. En effet, les besoins comme les machines ont changé, et comme la langue humaine, le language de programmation a évolué pour s'adapter à ces changements. 

Ce qui est connu de presque tous, c'est que Python a deux grandes versions : Python 2 et Python 3. Python 2 a été largement utilisé et apprécié, mais en 2020, il a été officiellement abandonné au profit de Python 3, qui a été publié en 2008. Et oui, il a fallu 12 ans pour que Python 3 devienne la version officielle de Python, car les différences entre les versions 2 et 3 étaient importantes, et il a fallu du temps pour que les développeurs s'adaptent. 

Cela va de la syntaxe à la gestion de la mémoire, en passant par la gestion des chaînes de caractères et des bibliothèques, et l'un des exemples les plus connus est le passage de `print` à une fonction, qui a été introduit dans Python 3:
 - Python 2 : `print "Hello World"`
 - Python 3 : `print("Hello World")`

D'exterieur, cela peut sembler être un changement mineur, mais au niveau de ce que cela signifie en terme de fonctionnement interne, c'est un changement majeur. En effet, dans Python 2, `print` est un mot clé, alors que dans Python 3, c'est une fonction. Cela signifie que dans Python 2, `print` est un mot clé qui est interprété par l'interpréteur Python, alors que dans Python 3, `print` est une fonction qui est appelée par l'interpréteur Python.

Cela cache en fait une forme d'uniformisation du code, car Python a la particularité d'être un language objet, et donc tout est un objet, y compris les fonctions. Cela signifie que les fonctions peuvent être passées en paramètre, et donc que les fonctions peuvent être appelées par d'autres fonctions. Cela permet de créer des fonctions qui peuvent être utilisées dans des contextes différents, et donc de réduire la duplication de code. 

Et bien qu'il ai fallu 12 ans pour que Python 3 devienne la version officielle de Python, il a continué d'évoluer, et continue encore aujourd'hui. En effet, Python en est à sa version 3.12, et bien que les changements ne soient pas aussi fondamentaux, les nouvelles capacités dont se dotent le language reste puissantes. On peut ainsi citer l'évolution continue de **L'Asynchronisme en Python :**
- **Emergence de l'Asynchronisme**: Python a intégré des concepts d'asynchronisme pour répondre aux besoins modernes en programmation, notamment pour la gestion efficace des opérations I/O et pour le développement d'applications web.
- **asyncio en Python 3.5**: Le module `asyncio` a été introduit dans Python 3.5, marquant un changement significatif dans la gestion de la concurrence et des opérations asynchrones. Il permet d'écrire du code asynchrone en utilisant la syntaxe `async`/`await`, facilitant la création de programmes non bloquants.
- **Améliorations continues**: Depuis Python 3.5, il y a eu des améliorations continues dans les fonctionnalités asynchrones, rendant Python plus adapté pour des applications nécessitant de hautes performances en matière de concurrence et d'asynchronisme.

### c - Popularité et Critiques

**Pourquoi Python est largement adopté :**
1. **Facilité d'apprentissage et de lecture**: La syntaxe de Python est conçue pour être intuitive et lisible, ce qui rend l'apprentissage du langage plus accessible aux débutants.
2. **Polyvalence**: Python est utilisé dans divers domaines, tels que le développement web, l'analyse de données, l'intelligence artificielle, et la science des données.
3. **Bibliothèques et Frameworks**: Python bénéficie d'un écosystème riche, avec des bibliothèques comme NumPy, Pandas, TensorFlow, et Flask, qui étendent ses capacités.
4. **Communauté active**: Une vaste communauté de développeurs contribue à l'amélioration continue de Python et offre un soutien important via des forums et des ressources en ligne.
5. **Interopérabilité**: Python peut être intégré avec d'autres langages de programmation, ce qui lui permet de s'adapter à divers environnements et exigences de projet.

**Critiques courantes de Python :**
1. **Vitesse d'exécution**: Étant un langage interprété, Python peut être plus lent que les langages compilés comme C ou Java, particulièrement dans les applications nécessitant de lourds calculs.
2. **Gestion de la mémoire**: Python utilise une gestion de mémoire automatique qui peut entraîner une consommation de mémoire plus élevée.
3. **Dépendance aux bibliothèques**: La richesse des bibliothèques Python est à double tranchant. Certains développeurs critiquent la dépendance excessive à des bibliothèques externes pour des fonctionnalités de base.
4. **Limitations en matière de programmation mobile et de jeux**: Python n'est pas le choix principal pour le développement d'applications mobiles et de jeux en raison de sa vitesse et de sa consommation de ressources.
5. **Versionnage**: La transition de Python 2 à Python 3 a créé des problèmes de compatibilité, bien que cela se soit amélioré avec le temps. 


### d - Comprendre ces limites

Ces limites viennent de l'histoire du language, et de ses choix de conception. D'une part, Python est un language interprété, et donc il est plus lent que les languages compilés. Cela vient du fait que l'interpréteur Python doit lire le code, le comprendre, et l'exécuter, alors qu'un compilateur va transformer le code en langage machine, et donc le code est directement exécutable. 

Cela vient du typage dynamique de Python, qui permet de ne pas avoir à déclarer le type des variables, et donc de ne pas avoir à réserver de la mémoire pour ces variables. Cela permet de ne pas avoir à se soucier de la mémoire, mais cela a un coût, car l'interpréteur Python doit déterminer le type des variables à l'exécution, et donc cela prend du temps.

Et cela vient du fait que la language a été développé à une époque où les ordinateurs n'avaient qu'un seul CPU, et donc ne pouvaient exécuter qu'une seule instruction à la fois. Cela a conduit à un language qui n'est pas adapté à la programmation parallèle, et donc qui ne peut pas tirer parti des architectures modernes qui ont plusieurs CPU, et donc peuvent exécuter plusieurs instructions en même temps, du moins pas de la même façon que le peut un language comme C. Ce problème est très connu et se nomme le GIL (Global Interpreter Lock), il est un problème qui est connu depuis longtemps, mais qui n'a pas encore été résolu. Un peu de lecture, pour les plus curieux : [Python GIL](https://realpython.com/python-gil/), [Python GIL](https://wiki.python.org/moin/GlobalInterpreterLock), [Python GIL](https://github.com/zpoint/CPython-Internals/blob/master/Interpreter/gil/gil.md)

### e - Les Peps

Les PEPs (Python Enhancement Proposals) sont des propositions d'amélioration du langage Python. Ils sont utilisés pour discuter des nouvelles fonctionnalités et des changements de comportement du langage. Ils sont également utilisés pour décrire les normes de codage, les processus de développement et les décisions de conception. Les PEPs sont des documents vivants et peuvent être modifiés à mesure que de nouvelles informations sont disponibles.

Les PEPs sont numérotés et organisés dans une hiérarchie. Les PEPs sont numérotés de 0 à 9999, et sont organisés en trois catégories :
- **Informational PEPs (PEP 0-99)**: Les PEPs informatifs fournissent des informations sur le langage Python ou sur les processus de développement. Ils ne décrivent pas de nouvelles fonctionnalités ou de changements de comportement.
- **Process PEPs (PEP 100-199)**: Les PEPs de processus décrivent les processus de développement, les normes de codage et les décisions de conception.
- **Standards Track PEPs (PEP 200-9999)**: Les PEPs de la norme de suivi décrivent les nouvelles fonctionnalités et les changements de comportement du langage Python.
  
Les PEPs sont écrits en utilisant le format reStructuredText, et sont publiés sur le site web officiel de Python. Les PEPs sont discutés et révisés par la communauté Python, et sont acceptés ou rejetés par le BDFL (Benevolent Dictator For Life), Guido van Rossum.

Dans les derniers PEPs, l'un pourrait changer radicalement Python, le [PEP 703 – Making the Global Interpreter Lock Optional in CPython](https://peps.python.org/pep-0703/) qui propose de supprimer le GIL, et donc de permettre à Python d'être utilisé pour de la programmation parallèle. Cela permettrait à Python de tirer parti des architectures modernes.

[**Cela en tête nous pouvons donc commencer à apprendre Python, et à comprendre comment il fonctionne.**](2-Python_Execution.qmd)