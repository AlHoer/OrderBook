---
title: "Le PATH"
weight: 10
tags:
  - Basics
  - OS
  - PATH
  - virtual environment
  - Introduction
  - Cours
categories:
  - Cours
  - Introduction
type: book
description: Explorer la notion de PATH, un élément essentiel dans la configuration des environnements de développement.
image: .img/path.png
---


# Chapitre 4 - Le PATH ? C'est quoi ?

---
## Section 4.1 - Définition de PATH
- `PATH` est une variable d'environnement utilisée par le système d'exploitation pour localiser les fichiers exécutables requis pour lancer des programmes ou des commandes.
- Elle contient une liste de répertoires séparés par un délimiteur spécifique au système d'exploitation : point-virgule (`;`) pour Windows et deux-points (`:`) pour Unix/Linux.

## Section 4.2 - Fonctionnement de PATH
- Lorsqu'une commande est saisie dans le terminal ou l'invite de commande, le système parcourt les répertoires listés dans `PATH` à la recherche d'un fichier exécutable correspondant au nom de la commande.
- Si le fichier est trouvé, il est exécuté. Sinon, un message d'erreur indique que la commande est introuvable.

## Section 4.3 - Modification de PATH

### Pourquoi Modifier PATH?
- Ajouter de nouveaux chemins à `PATH` est souvent nécessaire après l'installation de nouveaux logiciels ou scripts pour permettre leur exécution depuis n'importe quel répertoire.
- La modification de `PATH` facilite l'accès à ces programmes sans avoir besoin de naviguer vers leur répertoire d'installation ou de spécifier leur chemin complet.

### Comment Modifier PATH?
- Sous Windows, `PATH` peut être modifié via les Propriétés Système ou l'Éditeur de Registre.
- Sous Unix/Linux et MacOS, `PATH` est généralement modifié en éditant les fichiers de configuration de l'interpréteur de commandes, tels que `.bashrc`, `.bash_profile`, ou `.zshrc`.

## Section 4.4 - Importance et Utilisation de PATH

### Simplification d'Accès
- `PATH` permet de lancer des applications et des scripts facilement depuis n'importe quel répertoire dans le terminal, en supprimant le besoin de saisir des chemins complets.

### Organisation des Exécutables
- Une gestion efficace de `PATH` aide à maintenir une organisation claire des programmes et scripts fréquemment utilisés, en centralisant leur accès.

### 4. Sécurité et PATH

**Risques de Sécurité**
- Ajouter des répertoires non sécurisés ou de sources inconnues à `PATH` peut exposer le système à des risques de sécurité. Des exécutables malveillants dans ces répertoires pourraient être lancés involontairement.

**Bonnes Pratiques**
- Il est recommandé de n'ajouter que des répertoires de confiance à `PATH` et de vérifier régulièrement son contenu pour éviter des risques de sécurité.

## Section 4.5 - Configuration de PATH pour Windows, Linux, et MacOS

#### Windows
- **Accès à PATH** : Accessible via Panneau de configuration > Système > Paramètres système avancés > Variables d'environnement.
- **Modification** : Ajouter ou modifier les valeurs dans la variable `Path` sous Variables d'environnement.
- **Application des Changements** : Les modifications prennent effet après redémarrage de l'invite de commande ou redémarrage du système.

#### Linux
- **Fichiers de Configuration** : `.bashrc`, `.bash_profile`, ou `.profile` dans le répertoire personnel de l'utilisateur.
- **Modification** : Ajouter `export PATH="/nouveau/chemin:$PATH"` au fichier correspondant.
- **Application des Changements** : Exécuter `source ~/.bashrc` ou ouvrir un nouveau terminal.

#### MacOS
- Similaire à Linux, MacOS utilise `.bash_profile` ou `.zshrc` pour les utilisateurs de zsh.
- La modification et l'application des changements sont identiques à celles de Linux.

### Configuration de PATH pour une Version Python Compilée Manuellement

La configuration de la variable `PATH` pour une version de Python compilée manuellement est un processus essentiel pour s'assurer que le système utilise la bonne version de Python. Voici des instructions spécifiques pour Windows, Linux et MacOS.

#### Windows

1. **Localisation de l'Exécutable Python**:
   - Trouvez le chemin où Python a été compilé et installé, par exemple, `C:\Users\VotreNom\mon_python`.

2. **Modification de PATH**:
   - Ouvrez les Propriétés Système > Variables d'environnement.
   - Sous "Variables système", trouvez et sélectionnez la variable `Path`, puis cliquez sur Modifier.
   - Ajoutez le chemin vers le dossier contenant l'exécutable Python, par exemple, `C:\Users\VotreNom\mon_python`.
   - Cliquez sur OK pour fermer les fenêtres.

3. **Application des Changements**:
   - Ouvrez une nouvelle invite de commande pour que les changements prennent effet.
   - Tapez `python --version` pour vérifier que la bonne version de Python est utilisée.

#### Linux

1. **Localisation de l'Exécutable Python**:
   - Supposons que Python soit installé dans `~/mon_python/`.

2. **Modification de PATH**:
   - Ouvrez le fichier `.bashrc` ou `.bash_profile` dans votre répertoire personnel avec un éditeur de texte.
   - Ajoutez la ligne `export PATH="~/mon_python/bin:$PATH"` à la fin du fichier.
   - Enregistrez et fermez le fichier.

3. **Application des Changements**:
   - Exécutez `source ~/.bashrc` ou redémarrez le terminal.
   - Vérifiez avec `python --version` que la version correcte de Python est utilisée.

#### MacOS

1. **Localisation de l'Exécutable Python**:
   - Comme pour Linux, identifiez où Python a été installé, par exemple, `~/mon_python/`.

2. **Modification de PATH**:
   - Si vous utilisez Bash, modifiez `.bash_profile` ; si vous utilisez Zsh, modifiez `.zshrc`.
   - Ajoutez `export PATH="~/mon_python/bin:$PATH"` à la fin du fichier correspondant.
   - Sauvegardez et fermez l'éditeur de texte.

3. **Application des Changements**:
   - Exécutez `source ~/.bash_profile` ou `source ~/.zshrc`, selon l'interpréteur de commandes que vous utilisez.
   - Utilisez `python --version` pour confirmer que le système utilise la version Python compilée manuellement.


### Points Importants à Noter

- **Ordre dans PATH** : L'ordre des chemins dans `PATH` est crucial. Le système recherche les exécutables dans l'ordre où les chemins apparaissent. Si vous voulez que votre version compilée de Python soit prioritaire, assurez-vous qu'elle apparaisse en premier dans la liste.
- **Sécurité** : Soyez prudent lors de la modification de `PATH`, surtout sous Unix/Linux et MacOS, car une mauvaise configuration peut affecter le fonctionnement du système.
- **Version par Défaut** : Si plusieurs versions de Python sont installées, la version exécutée par défaut sera celle trouvée en premier dans `PATH`.

En suivant ces étapes, vous pouvez configurer votre système pour utiliser une version spécifique de Python, vous offrant ainsi une plus grande flexibilité et contrôle sur votre environnement de développement.