---
title: "Installer et importer des librairies en Python"
weight: 10
tags:
  - Pandas
  - Bases
  - Libraries
  - Cours
categories:
  - Cours
  - Fondamentaux
type: book
description: "Rappel sur les bibliothèques Python, la gestion des paquets et les environnements virtuels"
image: .img/libraries.webp
code-links: binder
---


### 1. Rappel sur les Bibliothèques Python


**Définition et Utilisation :**
Une bibliothèque Python est un ensemble de modules et de fonctions pré-écrits qui peuvent être importés dans un programme pour ajouter des fonctionnalités sans écrire de code supplémentaire. Ces bibliothèques sont essentielles pour étendre les capacités de Python au-delà de ses fonctionnalités de base.

**Exemples Pratiques :**
- **Importation et Utilisation de la Bibliothèque Mathématique (math) :**
  ```python
  import math
  print(math.sqrt(16))  # Affiche 4.0, la racine carrée de 16
  ```

- **Manipulation de Données avec Pandas :**
  ```python
  import pandas as pd
  data = pd.read_csv('chemin/vers/fichier.csv')  # Lit un fichier CSV
  print(data.head())  # Affiche les premières lignes du DataFrame
  ```

Ces exemples montrent comment les bibliothèques standard comme `math` et des bibliothèques tierces comme `pandas` peuvent être utilisées pour effectuer des tâches complexes avec peu de code.

---

**Importance des Bibliothèques :**
Les bibliothèques Python sont au cœur de nombreuses applications, des analyses de données à la création de serveurs web. Elles permettent aux développeurs de se concentrer sur la logique spécifique de leur programme, en s'appuyant sur des outils fiables et bien testés pour des fonctions standard.

### 2. Comprendre pip et PYTHONPATH

**Fonctionnement de pip :**
pip est le gestionnaire de paquets par défaut pour Python. Il permet aux utilisateurs d'installer, de mettre à jour et de gérer des bibliothèques et des outils tiers disponibles sur le Python Package Index (PyPI). pip simplifie considérablement le processus d'installation des bibliothèques, en automatisant le téléchargement, la construction et l'installation des paquets.

**Exemples d'Utilisation de pip :**
- **Installation d'une bibliothèque :**
  ```bash
  pip install requests
  ```
  Cette commande installe la bibliothèque `requests`, utilisée pour effectuer des requêtes HTTP.

- **Mise à jour d'une bibliothèque :**
  ```bash
  pip install --upgrade numpy
  ```
  Met à jour la bibliothèque `numpy` à la dernière version disponible.

**Influence de PYTHONPATH :**
PYTHONPATH est une variable d'environnement qui informe l'interpréteur Python des emplacements où chercher les modules lors de l'importation. Si un module est installé dans un répertoire qui n'est pas inclus dans PYTHONPATH, Python ne le trouvera pas, ce qui peut entraîner des erreurs d'importation.

**Exemples de Configuration de PYTHONPATH :**
- **Ajout d'un Chemin à PYTHONPATH sur Unix/Linux :**
  ```bash
  export PYTHONPATH="/chemin/vers/mon/module:$PYTHONPATH"
  ```
  Ajoute "/chemin/vers/mon/module" au PYTHONPATH.

- **Ajout d'un Chemin à PYTHONPATH sur Windows :**
  ```cmd
  set PYTHONPATH=C:\chemin\vers\mon\module;%PYTHONPATH%
  ```
  Ajoute "C:\chemin\vers\mon\module" au PYTHONPATH.

**Importance de Comprendre pip et PYTHONPATH :**
La compréhension de pip et de PYTHONPATH est cruciale pour gérer efficacement les dépendances dans les projets Python. Une bonne gestion des paquets et une configuration adéquate de PYTHONPATH permettent d'éviter les conflits de dépendances et les erreurs lors de l'exécution des programmes.


### 3. Gestion de Plusieurs Versions de Python : Comprendre `python -m pip` vs `pip`

**Contexte des Versions Multiples de Python :**
Dans un environnement où plusieurs versions de Python sont installées, il est essentiel de s'assurer que les commandes pip correspondent à la bonne version de Python. Cela est particulièrement vrai dans les systèmes où Python 2 et Python 3 coexistent, ou lorsqu'on utilise plusieurs sous-versions de Python 3.

**Explication de `python -m pip` vs `pip` :**
- **`pip` seul :** Lorsqu'on utilise la commande `pip` seule, elle fait référence au pip associé à la version de Python par défaut dans le chemin d'accès système (PATH). Cela peut conduire à des ambiguïtés si plusieurs versions de Python sont installées.
- **`python -m pip` :** L'utilisation de `-m` est un indicateur pour Python d'exécuter le module de bibliothèque comme un script. Cela signifie que lorsque vous exécutez `python -m pip`, vous demandez explicitement à la version spécifique de Python (précédée de la commande) d'exécuter le module pip. Ainsi, `python3.8 -m pip` exécutera pip pour Python 3.8, indépendamment de la version de Python définie par défaut dans le chemin d'accès système.

**Exemples Pratiques :**
- **Installation avec une Version Spécifique :**
  ```bash
  python3.8 -m pip install requests
  ```
  Cette commande utilise pip associé à Python 3.8 pour installer la bibliothèque `requests`.

- **Différence dans l'Environnement :**
  ```bash
  python3.6 -m pip --version
  python3.7 -m pip --version
  ```
  Ces commandes affichent les versions de pip associées respectivement à Python 3.6 et 3.7, démontrant l'utilisation ciblée de pip pour différentes versions de Python.

**Résolution des Problèmes de Versions :**
L'usage de `python -m pip` est crucial dans des environnements multi-versions pour garantir que les bonnes versions de Python et de pip sont utilisées, évitant ainsi des problèmes de compatibilité et des erreurs de dépendances.

### 4. Emplacements d'Installation des Bibliothèques en Python

**Chemins d'Installation par Défaut :**
Lorsque des bibliothèques sont installées via pip, elles sont généralement placées dans le répertoire `site-packages` de l'installation Python concernée. Ce répertoire est spécifique à chaque version de Python sur le système. Par exemple, sous un système d'exploitation Windows, pour Python 3.9, le chemin par défaut serait `C:\Python39\Lib\site-packages`.

**Chemins d'Installation Personnalisés :**
Il est également possible de spécifier un chemin d'installation personnalisé pour les bibliothèques Python en utilisant l'option `--target` de pip. Cette méthode est utile pour installer des bibliothèques dans un environnement spécifique ou pour éviter des modifications globales sur le système.

**Exemples d'Installation de Bibliothèques :**
- **Installation Standard :**
  ```bash
  pip install requests
  ```
  Installe `requests` dans le répertoire `site-packages` par défaut de la version de Python utilisée.

- **Installation dans un Chemin Personnalisé :**
  ```bash
  pip install matplotlib --target=/mon/dossier/personnel
  ```
  Installe `matplotlib` dans `/mon/dossier/personnel`.

**Rôle de PYTHONPATH dans l'Installation :**
Si des bibliothèques sont installées dans un emplacement personnalisé, ce chemin doit être ajouté à PYTHONPATH pour que Python puisse trouver ces bibliothèques lors de l'importation. Sans cela, des erreurs d'importation peuvent survenir.

**Exemple de Configuration de PYTHONPATH pour un Chemin Personnalisé :**
- **Ajout d'un Chemin Personnalisé à PYTHONPATH sur Unix/Linux :**
  ```bash
  export PYTHONPATH="/mon/dossier/personnel:$PYTHONPATH"
  ```
  Ajoute le chemin personnalisé au PYTHONPATH.


### 5. Environnements Virtuels en Python

**Définition et Objectif des Environnements Virtuels :**
Un environnement virtuel en Python est un espace isolé qui permet d'installer et de gérer des bibliothèques pour des projets spécifiques, indépendamment des bibliothèques installées globalement sur le système. Cela évite les conflits entre les versions des bibliothèques requises par différents projets.

**Création et Gestion des Environnements Virtuels :**
Pour créer un environnement virtuel, on utilise la commande `python -m venv`. Ceci crée un dossier contenant une installation Python indépendante. Dans cet environnement, vous pouvez installer, mettre à jour ou supprimer des bibliothèques sans affecter l'environnement global ou d'autres environnements virtuels.

**Exemples d'Utilisation des Environnements Virtuels :**
- **Création d'un Environnement Virtuel :**
  ```bash
  python -m venv mon_env
  ```
  Crée un nouvel environnement virtuel nommé `mon_env`.

- **Activation d'un Environnement Virtuel :**
  - Sous Windows : `mon_env\Scripts\activate`
  - Sous Unix ou MacOS : `source mon_env/bin/activate`

  Ces commandes activent l'environnement virtuel, isolant ainsi les dépendances de projet.

- **Installation de Bibliothèques dans un Environnement Virtuel :**
  Une fois l'environnement activé :
  ```bash
  pip install flask
  ```
  Installe `flask` uniquement dans l'environnement virtuel actif.

**Avantages des Environnements Virtuels :**
Les environnements virtuels offrent plusieurs avantages :
- **Isolation des Dépendances :** Permet de gérer des dépendances spécifiques à chaque projet.
- **Prévention des Conflits :** Évite les conflits entre les différentes versions des bibliothèques.
- **Facilité de Reproduction :** Facilite la reproduction des environnements de développement et de production.

### 6. Histoire et Évolution de la Gestion des Dépendances en Python

**Problèmes avec `requirements.txt` :**
Historiquement, la gestion des dépendances en Python s'effectuait principalement via un fichier `requirements.txt`. Ce fichier contenait une liste des bibliothèques nécessaires au projet. Cependant, `requirements.txt` avait des limitations, notamment en ce qui concerne la gestion des sous-dépendances (les dépendances des bibliothèques installées) et la spécification des versions.

Un problème majeur était l'absence de reproductibilité : même en spécifiant les versions directes des dépendances, `requirements.txt` ne gérait pas toujours correctement les sous-dépendances. Deux installations du même `requirements.txt` pouvaient donc aboutir à des environnements légèrement différents, en raison de variations dans les versions des sous-dépendances.

**Introduction de pipenv et poetry :**
Pour remédier à ces problèmes, des outils comme pipenv et poetry ont été développés. Ces outils offrent une approche plus holistique de la gestion des dépendances, en traitant non seulement les dépendances directes mais aussi les sous-dépendances.

**pipenv :**
Pipenv utilise un `Pipfile` et un `Pipfile.lock` pour gérer les dépendances. Le `Pipfile.lock` joue un rôle crucial en enregistrant les versions exactes de toutes les dépendances et sous-dépendances, garantissant ainsi la reproductibilité des environnements.

**poetry :**
Poetry va plus loin en introduisant le fichier `pyproject.toml`. Ce fichier remplit plusieurs fonctions :
- **Gestion Globale des Dépendances :** `pyproject.toml` permet de déclarer des dépendances de manière plus structurée et lisible.
- **Séparation des Dépendances de Développement :** Poetry permet de distinguer les dépendances nécessaires pour l'exécution du projet (production) de celles nécessaires uniquement pour le développement (développement). Cela permet une meilleure gestion et une installation plus légère en production.
- **Facilité de Configuration :** `pyproject.toml` sert également à configurer d'autres aspects du projet, comme les scripts de build et les métadonnées, centralisant ainsi la configuration.

**Exemple avec poetry :**
```toml
[tool.poetry]
name = "mon_projet"
version = "0.1.0"
description = "Un exemple de projet Python"

[tool.poetry.dependencies]
python = "^3.8"
requests = "^2.25.1"

[tool.poetry.dev-dependencies]
pytest = "^6.2.2"
```

Dans cet exemple, `requests` est une dépendance de production, tandis que `pytest` est une dépendance de développement, utilisée uniquement pendant la phase de test.

### 7. Utilisation des Bibliothèques Importées

**Principes de Base de l'Importation en Python :**
Après avoir installé une bibliothèque, elle doit être importée dans votre script pour être utilisée. L'importation en Python est réalisée à l'aide du mot-clé `import`, suivi du nom de la bibliothèque. Cette étape est cruciale pour accéder aux fonctions, classes et méthodes que la bibliothèque offre.

**Exemples Pratiques d'Importation et d'Utilisation de Bibliothèques :**
- **Utilisation de la Bibliothèque Requests :**
  ```python
  import requests
  response = requests.get('https://www.example.com')
  print(response.text)
  ```
  Dans cet exemple, `requests` est utilisée pour effectuer une requête HTTP vers un site web, et le contenu de la réponse est affiché.

- **Travail avec Pandas :**
  ```python
  import pandas as pd
  df = pd.read_csv('data.csv')
  print(df.head())
  ```
  Ici, `pandas` est importé sous l'alias `pd`, et est utilisé pour lire un fichier CSV et afficher ses premières lignes.

**Gestion des Importations en Cas de Conflits :**
Parfois, des noms de modules ou de fonctions peuvent entrer en conflit avec d'autres ou avec des noms réservés de Python. Dans ces cas, les alias peuvent être utilisés pour résoudre ces conflits, comme dans l'exemple avec `pandas`.

**Importance de Comprendre l'Importation :**
Comprendre comment importer et utiliser les bibliothèques est fondamental pour le développement en Python. Cela permet non seulement d'étendre les capacités du code, mais favorise également la réutilisation de code et le partage de fonctionnalités entre projets.
