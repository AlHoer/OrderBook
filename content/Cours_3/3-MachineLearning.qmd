---
title: "Machine Learning"
weight: 10
tags:
  - Pandas
  - Bases
  - Libraries
  - Cours
categories:
  - Cours
  - Fondamentaux
type: book
description: "Python, où le ML à deux cliques de souris"
image: .img/sklearn.png
filters:
  - pyodide
---

# Machine Learning

---


## Introduction au Machine Learning avec Python
Python est devenu la langue de prédilection pour le machine learning (ML) en raison de sa simplicité, de sa richesse en bibliothèques, et de sa communauté active. Des bibliothèques comme Scikit-learn, TensorFlow, et PyTorch facilitent la mise en œuvre de diverses techniques de ML.

## Scikit-learn: Un Point de Départ pour le Machine Learning
- **Scikit-learn** est une bibliothèque Python polyvalente pour le machine learning. Elle offre des outils simples et efficaces pour l'analyse de données et la modélisation statistique.
- Fonctionnalités clés :
  - **Classification, Régression, et Clustering**: Algorithmes pour les tâches de ML les plus courantes.
  - **Prétraitement des Données**: Outils pour normaliser, échelonner, et transformer les données.
  - **Sélection de Modèles et Validation Croisée**: Méthodes pour choisir les meilleurs modèles et paramètres.

## Exemple d'Utilisation de Scikit-learn
- **Classification avec Scikit-learn**:
```{pyodide-python}
from sklearn.datasets import load_iris
from sklearn.ensemble import RandomForestClassifier

# Chargement des données
iris = load_iris()
X, y = iris.data, iris.target

# Entraînement d'un modèle de forêt aléatoire
clf = RandomForestClassifier()
clf.fit(X, y)
```

## TensorFlow et PyTorch: Pour des Applications Plus Avancées
- **TensorFlow** et **PyTorch** sont des bibliothèques plus spécialisées, offrant des fonctionnalités avancées pour les réseaux de neurones profonds et l'apprentissage automatique à grande échelle.
- Elles sont particulièrement adaptées pour :
  - **Réseaux de Neurones Profonds**: Construction et entraînement de modèles complexes.
  - **Traitement de Données à Grande Échelle**: Gestion efficace des ensembles de données volumineux.
  - **Personnalisation et Recherche**: Flexibilité pour expérimenter de nouvelles idées en ML.

## Exercice Pratique
1. **Objectif**: Se familiariser avec le processus de base du machine learning en utilisant Scikit-learn.
2. **Énoncé**: Utilisez Scikit-learn pour construire un classificateur simple sur un jeu de données standard, évaluez ses performances, et essayez d'améliorer ses résultats en ajustant les paramètres.
3. **Solution**:
```{pyodide-python}
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score

# Division en ensembles d'entraînement et de test
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3)

# Entraînement du modèle
clf.fit(X_train, y_train)

# Évaluation du modèle
y_pred = clf.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
```

## Conclusion
Le machine learning en Python offre un éventail impressionnant d'outils et de techniques pour l'analyse de données, la prédiction, et la compréhension des modèles complexes. Que vous débutiez avec Scikit-learn ou que vous plongiez dans des modèles plus avancés avec TensorFlow ou PyTorch, Python a les ressources pour répondre à vos besoins en ML.

### Compléments sur le Machine Learning en Python : Statsmodels, PyTorch, et TensorFlow

## Statsmodels : Analyse Statistique en Python
- **Statsmodels** est une bibliothèque Python spécialisée dans les modèles statistiques et l'économétrie. Elle est particulièrement utile pour les analyses statistiques traditionnelles.
- Fonctionnalités clés de Statsmodels :
  - **Régressions Linéaires et Logistiques**: Outils pour modéliser les relations entre variables.
  - **Tests Statistiques**: Tests pour valider les hypothèses sur les données.
  - **Exploration de Séries Temporelles**: Outils pour analyser les données dépendant du temps.

## PyTorch : Apprentissage Profond et Recherche
- **PyTorch** est une bibliothèque d'apprentissage profond très appréciée dans la communauté de recherche en raison de sa flexibilité et de sa facilité d'utilisation.
- Aspects saillants de PyTorch :
  - **Autograd**: Système de différenciation automatique pour le calcul des gradients.
  - **Réseaux de Neurones Personnalisés**: Facilité de création et d'expérimentation avec de nouveaux modèles.
  - **Performances en Temps Réel**: Optimisé pour les calculs sur GPU, idéal pour l'entraînement de modèles complexes.

## TensorFlow : Machine Learning à Grande Échelle
- **TensorFlow** est une bibliothèque développée par Google, largement utilisée pour des applications d'apprentissage automatique complexes, en particulier celles nécessitant une grande échelle de calcul.
- Caractéristiques principales de TensorFlow :
  - **Architecture Flexible**: Convient à la fois pour la recherche et la production.
  - **TensorBoard**: Outil pour la visualisation et le monitoring des modèles.
  - **TFLite pour les Applications Mobiles et Embarquées**: Permet de déployer des modèles ML sur des appareils mobiles.

## Exercice Pratique avec PyTorch ou TensorFlow
1. **Objectif**: Se familiariser avec l'apprentissage profond en utilisant PyTorch ou TensorFlow.
2. **Énoncé**: Construisez et entraînez un réseau de neurones simple pour classifier des images à partir d'un jeu de données standard comme MNIST.
3. **Solution** (avec PyTorch) :
```{pyodide-python}
import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms
from torch.utils.data import DataLoader

# Chargement des données
transform = transforms.ToTensor()
train_dataset = datasets.MNIST(root='./data', train=True, transform=transform, download=True)
train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)

# Définition du modèle
class SimpleNN(nn.Module):
    def __init__(self):
        super(SimpleNN, self).__init__()
        self.linear = nn.Linear(784, 10)

    def forward(self, x):
        x = x.view(x.size(0), -1)  # Aplatir l'image
        return self.linear(x)

model = SimpleNN()
criterion = nn.CrossEntropyLoss()
optimizer = optim.SGD(model.parameters(), lr=0.01)

# Entraînement du modèle
for epoch in range(5):
    for data, target in train_loader:
        optimizer.zero_grad()
        output = model(data)
        loss = criterion(output, target)
        loss.backward()
        optimizer.step()
    print(f'Epoch {epoch}, Loss: {loss.item()}')
```

## Conclusion
L'écosystème du machine learning en Python est riche et varié, offrant des outils adaptés à une large gamme de besoins, de l'analyse statistique traditionnelle avec Statsmodels à l'apprentissage profond avec PyTorch et TensorFlow. Chaque outil a ses propres forces, et le choix dépend des objectifs spécifiques du projet, de l'expertise de l'utilisateur, et du contexte d'application.

